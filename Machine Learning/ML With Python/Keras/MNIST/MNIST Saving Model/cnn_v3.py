# -*- coding: utf-8 -*-
"""CNN_V3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TJOFTmcULBsTuyTtGrWJ2RjQmqblrEZe
"""

from keras.datasets import mnist
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split

(x_train, y_train), (x_test, y_test) = mnist.load_data()

x_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size=0.5, stratify=y_train)

print(len(y_train), len(y_val), len(y_test))

import numpy
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Conv2D
from keras.layers import Flatten
from keras.layers import Dropout
from keras.layers import MaxPooling2D
from keras.utils import np_utils

x_train = x_train.reshape(x_train.shape[0], 28, 28, 1).astype('float32')
x_val = x_val.reshape(x_val.shape[0], 28, 28, 1).astype('float32')
x_test = x_test.reshape(x_test.shape[0], 28, 28, 1).astype('float32')

x_train = x_train / 255
x_val = x_val / 255
x_test = x_test / 255

y_train = np_utils.to_categorical(y_train)
y_val = np_utils.to_categorical(y_val)
y_test = np_utils.to_categorical(y_test)
num_classes = y_test.shape[1]

def baseline_model():
  model = Sequential()
  model.add(Conv2D(32, (3, 3), input_shape=(28, 28, 1), activation="relu"))
  model.add(MaxPooling2D(pool_size=(2, 2)))
  model.add(Conv2D(32, (3, 3), activation="relu"))
  model.add(MaxPooling2D(pool_size=(2, 2)))
  model.add(Conv2D(64, (3, 3), activation="relu"))
  model.add(MaxPooling2D(pool_size=(2, 2)))
  model.add(Flatten())
  model.add(Dense(64, activation="relu"))
  model.add(Dropout(0.5))
  model.add(Dense(10, activation="sigmoid"))
  model.compile(loss='categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy'])
  return model

model = baseline_model()
model.summary()

model.fit(x_train, y_train, validation_data=(x_val, y_val), epochs=10, batch_size=200)

scores = model.evaluate(x_test, y_test, verbose=0)
result = str("%.2f"%(1-scores[1]))
print("CNN Error", result)

# 
!pip install pyyaml h5py

from google.colab import drive
drive.mount('/content/gdrive')

model_json = model.to_json()
with open("/content/gdrive/My Drive/Colab Notebooks/model.json" , "w") as json_file:
    json_file.write(model_json)

#serialize weights to HDF5
model.save_weights("/content/gdrive/My Drive/Colab Notebooks/model_w.h5" )