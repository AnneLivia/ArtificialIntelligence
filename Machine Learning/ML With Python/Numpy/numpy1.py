# -*- coding: utf-8 -*-
"""numpy1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/159GJOJAp0i_wads4RFzMYWqDOzTZRn-j

What is numpy ?

Acoording to this [website](https://numpy.org/doc/stable/user/whatisnumpy.html), NumPy is the fundamental package for scientific computing in Python. It is a Python library that provides a multidimensional array object, various derived objects (such as masked arrays and matrices), and an assortment of routines for fast operations on arrays, including mathematical, logical, shape manipulation, sorting, selecting, I/O, discrete Fourier transforms, basic linear algebra, basic statistical operations, random simulation and much more.
"""

import numpy as np
import matplotlib.pylab as plt
from numpy import random

# creating one dimensional array
listt = [x for x in range(1, 10)]
print("List: ", listt)
np_array = np.array(listt, dtype=np.float32)
print("Np Array", np_array)

# creating two dimensinal array
lisst_2d = [[x for x in range(5)], [x for x in range(5, 10)], [x for x in range(10, 15)]]
print("2d list: ", lisst_2d)
np_array_2d = np.array(lisst_2d, dtype=np.float32)
print("Np Array", np_array_2d)

# range of numbers with np
print(np.arange(1, 10))

# generating float range. Return evenly spaced numbers over a specified interval.
print(np.linspace(0, 2, 7))

# array of zeros
print(np.zeros(4))
print(np.ones((2, 3)))
print(np_array_2d.size)
print(np_array_2d.dtype)
print("Random: ", np.random.randint(10, 60, size=(3, 3)))

# by using ? after a function we can have information about a function
np.zeros?

np_array_2d[0, 1] = 2
np_array_2d.itemset((1, 3), 2)
print(np_array_2d)
print("Shape: ", np_array_2d.shape)
print(np_array_2d.item(0, 2))

# getting specifics indexes
print(np.take(np_array_2d, [0, 3]))
# replacing values (first the index, second the values)
np.put(np_array_2d, [0, 3, 6], [0, 0, 0])
print(np_array_2d)

# slicing array (from 0 to 5 step 2)
print(np_array[:5:2])
# get values from second array
print(np_array_2d[:,1])
# flip array
print(np_array[::-1])
# even or odd numbers, and other conditions
print(np_array[np_array % 2 == 0])
print(np_array[np_array % 2 != 0])
print(np_array[(np_array > 2) & (np_array < 5)])
print(np_array[(np_array > 2) | (np_array == 9)])

np_array[1] = 2
np_array[2] = 2
np_array[3] = 2
print(np_array[::-1])
print(np.unique(np_array))

# reshaping array (gives a new shape to an array without changing its data.)
# first is the number of rows and second is the number of cols
print(np_array.reshape((3,3)))
''' resize array
    Return a new array with the specified shape.

    If the new array is larger than the original array, then the new
    array is filled with repeated copies of a.  Note that this behavior
    is different from a.resize(new_shape) which fills with zeros instead
    of repeated copies of a.
'''
print(np.resize(np_array, (2, 5)))

'''
    In linear algebra, the transpose of a matrix is an operator which flips a matrix 
    over its diagonal; that is, it switches the row and column indices of the matrix 
    A by producing another matrix, often denoted by AT (among other notations).

'''
print("before transposing: \n", np_array_2d)
print("after transposing: \n", np_array_2d.transpose())
# swaping values from two index
np.resize(np_array_2d, (2, 5))
print("before swap axes: \n", np_array_2d)
print("Swap axes: \n", np_array_2d.swapaxes(0, 1))

# flatten array
print(np_array_2d.flatten())

# flatten in collunm order
print(np_array_2d.flatten('F'))
# sort rows
np_array_2d_random = np.random.randint(1, 50, size=(4, 4))
print("Before sort: \n", np_array_2d_random)
np_array_2d_random.sort(axis=1)
print("Sort rows:\n",np_array_2d_random)
#  sort cols
np_array_2d_random.sort(axis=0)
print("sort cols:\n",np_array_2d_random)

