#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <algorithm>

using namespace std;

/*
    Algorithm PseudoCode:
        Start
            - create population
            - compute fitness
            - repeat
            - selection
            - crossover
            - mutation
            - compute fitness
        - until population has converged
    stop

*/

int fitness(const string& a1, const string& target) {
    int cont = 0;
    for (int i = 0; i < (int)target.size(); i++)
        cont+= a1[i] == target[i] ? 1 : 0;
    return cont;
}

int main()
{
    srand(time(NULL));

    // using genetic algorithm to guess the password (without space)
    string target = "password";
    string letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

    // need to generate chromosomes of random words
    /*
        n genetic algorithms, a chromosome (also sometimes called a genotype)
        is a set of parameters which define a proposed solution to the problem
        that the genetic algorithm is trying to solve. The set of all solutions
        is known as the population.
    */

    int number_population = 20;
    vector<string>population;
    while((int)population.size() < number_population) {
        // generating population
        string aux = "";
        for (int i = 0; i < (int)target.size(); i++) {
            aux+=letters[rand() % (int)(letters.size() - 1)];
        }
        population.push_back(aux);
    }

    // after generate the population need to perform the fitness to check if there's a
    // chromosome that is closer to the answer or is the answer

    while(true) {
        /*
            The fitness value the genetic algorithm provides is the only feedback the engine gets to guide it toward a solution. In
            this project the fitness value is the total number of letters in the guess that match the letter in the same position of the
            password.
        */
        for (int i = 0; i < number_population; i++) {
            if (fitness(population[i], target) == (int)target.size()) {
                cout <<
            }
        }
    }
    return 0;
}
